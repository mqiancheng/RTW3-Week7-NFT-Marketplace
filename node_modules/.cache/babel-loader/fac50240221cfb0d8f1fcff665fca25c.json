{"ast":null,"code":"var _jsxFileName = \"/home/mqiancheng/githubtest/RTW3-Week7-NFT-Marketplace/src/components/NFTpage.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NFTPage(props) {\n  _s();\n\n  const [data, updateData] = useState({});\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n  const [dataFetched, updateDataFetched] = useState(false);\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    const tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n  }\n\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner(); //Pull the deployed contract instance\n\n      let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n      const salePrice = ethers.utils.parseUnits(data.price, 'ether');\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice\n      });\n      await transaction.wait();\n      alert('You successfully bought the NFT!');\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex ml-20 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.image,\n        alt: \"\",\n        className: \"w-2/5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Name: \", data.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Description: \", data.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"\",\n            children: data.price + \" ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Owner: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.owner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Seller: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.seller\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currAddress == data.owner || currAddress == data.seller ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-emerald-700\",\n            children: \"You are the owner of this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n            children: \"Buy this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-green text-center mt-3\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NFTPage, \"m8wJRRaZN1yt1oJyamgkgKyxMM4=\");\n\n_c = NFTPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTPage\");","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","NFTPage","props","data","updateData","message","updateMessage","currAddress","updateCurrAddress","dataFetched","updateDataFetched","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","tokenURI","listedToken","getListedTokenForId","meta","get","console","log","item","price","seller","owner","image","name","description","buyNFT","salePrice","utils","parseUnits","transaction","executeSale","value","wait","alert","e"],"sources":["/home/mqiancheng/githubtest/RTW3-Week7-NFT-Marketplace/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function NFTPage(props) {\n\n  const [data, updateData] = useState({});\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n  const [dataFetched, updateDataFetched] = useState(false);\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    const tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description,\n    }\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n  }\n\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\");\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n      const salePrice = ethers.utils.parseUnits(data.price, 'ether')\n      let transaction = await contract.executeSale(tokenId, { value: salePrice });\n      await transaction.wait();\n\n      alert('You successfully bought the NFT!');\n    }\n    catch (e) {\n      alert(\"Upload Error\" + e)\n    }\n  }\n\n  return (\n    <div style={{ \"min-height\": \"100vh\" }}>\n      <Navbar></Navbar>\n      <div className=\"flex ml-20 mt-20\">\n        <img src={data.image} alt=\"\" className=\"w-2/5\" />\n        <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n          <div>\n            Name: {data.name}\n          </div>\n          <div>\n            Description: {data.description}\n          </div>\n          <div>\n            Price: <span className=\"\">{data.price + \" ETH\"}</span>\n          </div>\n          <div>\n            Owner: <span className=\"text-sm\">{data.owner}</span>\n          </div>\n          <div>\n            Seller: <span className=\"text-sm\">{data.seller}</span>\n          </div>\n          <div>\n            {currAddress == data.owner || currAddress == data.seller ?\n              <div className=\"text-emerald-700\">You are the owner of this NFT</div>\n              : <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\">Buy this NFT</button>\n            }\n\n            <div className=\"text-green text-center mt-3\">{message}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}