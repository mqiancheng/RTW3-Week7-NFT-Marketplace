{"ast":null,"code":"var _jsxFileName = \"/home/mqiancheng/githubtest/RTW3-Week7-NFT-Marketplace/src/components/Profile.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from \"./Navbar\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Profile() {\n  _s();\n\n  const [data, updateData] = useState([]);\n  const [address, updateAddress] = useState(\"0x\");\n  const [totalPrice, updateTotalPrice] = useState(\"0\");\n  const [dataFetched, updateFetched] = useState(false);\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n\n    let sumPrice = 0; //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    let transaction = await contract.getMyNFTs();\n    /*\n    * Below function takes the metadata from tokenURI and the data returned by getMyNFTs() contract function\n    * and creates an object of information that is to be displayed\n    */\n\n    const items = await Promise.all(transaction.map(async i => {\n      const tokenURI = await contract.tokenURI(i.tokenId);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description\n      };\n      sumPrice += Number(price);\n      return item;\n    }));\n    updateData(items);\n    updateFetched(true);\n    updateAddress(addr);\n    updateTotalPrice(sumPrice.toPrecision(3));\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profileClass\",\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileClass\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex text-center flex-col mt-11 md:text-2xl text-white\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"font-bold\",\n            children: \"Wallet Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"font-bold\",\n            children: \"No. of NFTs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), data.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-20\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"font-bold\",\n            children: \"Total Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), totalPrice, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col text-center items-center mt-11 text-white\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"font-bold\",\n          children: \"Your NFTs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center flex-wrap max-w-screen-xl\",\n          children: data.map((value, index) => {\n            return /*#__PURE__*/_jsxDEV(NFTTile, {\n              data: value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-10 text-xl\",\n          children: data.length == 0 ? \"Oops, No NFT data to display (Are you logged in?)\" : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Profile, \"5R3AdJKQiPSIkEGwWNaYIEoBvOE=\", false, function () {\n  return [useParams];\n});\n\n_c = Profile;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["Navbar","useLocation","useParams","MarketplaceJSON","axios","useState","NFTTile","Profile","data","updateData","address","updateAddress","totalPrice","updateTotalPrice","dataFetched","updateFetched","getNFTData","tokenId","ethers","require","sumPrice","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","abi","transaction","getMyNFTs","items","Promise","all","map","i","tokenURI","meta","get","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","Number","toPrecision","params","length","value","index"],"sources":["/home/mqiancheng/githubtest/RTW3-Week7-NFT-Marketplace/src/components/Profile.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\n\nexport default function Profile() {\n  const [data, updateData] = useState([]);\n  const [address, updateAddress] = useState(\"0x\");\n  const [totalPrice, updateTotalPrice] = useState(\"0\");\n  const [dataFetched, updateFetched] = useState(false);\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    let sumPrice = 0;\n\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n\n    //create an NFT Token\n    let transaction = await contract.getMyNFTs()\n\n    /*\n    * Below function takes the metadata from tokenURI and the data returned by getMyNFTs() contract function\n    * and creates an object of information that is to be displayed\n    */\n\n    const items = await Promise.all(transaction.map(async i => {\n      const tokenURI = await contract.tokenURI(i.tokenId);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description,\n      }\n      sumPrice += Number(price);\n      return item;\n    }))\n\n    updateData(items);\n    updateFetched(true);\n    updateAddress(addr);\n    updateTotalPrice(sumPrice.toPrecision(3));\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched)\n    getNFTData(tokenId);\n  return (\n    <div className=\"profileClass\" style={{ \"min-height\": \"100vh\" }}>\n      <Navbar></Navbar>\n      <div className=\"profileClass\">\n        <div className=\"flex text-center flex-col mt-11 md:text-2xl text-white\">\n          <div className=\"mb-5\">\n            <h2 className=\"font-bold\">Wallet Address</h2>\n            {address}\n          </div>\n        </div>\n        <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\">\n          <div>\n            <h2 className=\"font-bold\">No. of NFTs</h2>\n            {data.length}\n          </div>\n          <div className=\"ml-20\">\n            <h2 className=\"font-bold\">Total Value</h2>\n            {totalPrice} ETH\n          </div>\n        </div>\n        <div className=\"flex flex-col text-center items-center mt-11 text-white\">\n          <h2 className=\"font-bold\">Your NFTs</h2>\n          <div className=\"flex justify-center flex-wrap max-w-screen-xl\">\n            {data.map((value, index) => {\n              return <NFTTile data={value} key={index}></NFTTile>;\n            })}\n          </div>\n          <div className=\"mt-10 text-xl\">\n            {data.length == 0 ? \"Oops, No NFT data to display (Are you logged in?)\" : \"\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}